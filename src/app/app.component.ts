// !!! ОПИСАНИЕ ИДЕТ ПЕРЕД ПРЕДМЕТОМ ОПИСАНИЯ (ЛИБО СПРАВА), А НЕ ПОСЛЕ -->

// Файл написан в TypeScript - улучшенном JavaScript

import { Component } from "@angular/core";
import { initialNotes } from "src/app/data";
import { Note } from "./models";
import * as _ from "lodash";

// объявление Angular-компонента - составного блока, из которых состоит Angular приложение
// (Angular - один из фреймворков веб-разработки - платформа для облегчения разработки)
@Component({
  selector: "app-root", // имя компонента, которое используется в HTML-файлах
  templateUrl: "./app.component.html", // ссылка на файл с описанием структуры веб-страницы
  styleUrls: ["./app.component.scss"], // ссылка на файл с описанием стилей элементов веб-страницы
})
export class AppComponent {
  //#region СВОЙСТВА КОМПОНЕНТА
  // имя_свойства: тип_свойства = первоначальное_значение (если имеется)

  notes: Note[] = _.cloneDeep(initialNotes); // создаем свойство, где будут храниться Заметки приложения. // присваиваем уже существующие Заметки, клонируя их,
  // чтобы не менять оригинальный массив в ходе работы с приложением (см. reference data types и deep copy)

  selectedNote: Note; // свойство для хранения выбранной юзером Заметки

  titleInput: string = ""; // свойство для хранения вводимого юзером названия еще не созданной Заметки
  titleMaxLength: number = 50; // максимальное кол-во символов для поля названия еще не созданной Заметки
  descriptionInput: string = ""; // свойство для хранения вводимого юзером описания еще не созданной Заметки
  descriptionMaxLength: number = 256; // максимальное кол-во символов для поля описания еще не созданной Заметки
  //#endregion СВОЙСТВА КОМПОНЕНТА

  //#region МЕТОДЫ КОМПОНЕНТА
  // имя_метода(имя_параметра: тип_параметра): тип_возвращаемого_методом_значения { тело_метода }

  // ключевое слово: void - используется для обозначения, что метод / функция ничего не возвращает (метод выполнил последовательность действий, но на выходе не отдает никаких данных)

  addNote(title: string, description: string): void {
    // ключевое слово: const - объявление переменной, которая не будет меняться (в противоположность let - объявление переменной, которая может меняться)
    // Обрати внимание: ссылочные типы данных могут менять свое содержание несмотря на объявление через const. Например, в массив можно добавить новый элемент, а в объекте изменить свойство объекта
    // Обрати внимание: ключевое слово var больше не используется

    const newNote = new Note(title, description); // создаем новую Заметку

    // ключевое слово: this - в данном случае означает сам (THIS) компонент, т.к. в рамках текущего метода надо обратиться к свойствам (notes) и методам (resetInput),
    // которые находятся вне текущего метода (параллельно ему)

    this.notes.push(newNote); // добавляем Заметку в список Заметок (метод push - добавить элемент в конец списка)
    this.resetInput(); // вызов другого метода компонента
  }

  private resetInput(): void {
    this.titleInput = ""; // сбрасываем поле с названием Заметки
    this.descriptionInput = ""; // сбрасываем поле с описанием Заметки
  }

  selectNote(note: Note): void {
    this.selectedNote = note; // назначаем кликнутую заметку в качестве выбранной заметки
  }

  deleteNote(note: Note): void {
    const idx = this.notes.findIndex((x) => x.id === note.id); // ищем индекс (положение Заметки в списке Заметок) удаляемой Заметки
    // метод выше в скобки принимает функцию, которая используется для нахождения Заметки
    // В данном случае мы перебираем Заметки (x), сравнивая id Заметки с id Заметки, которую мы собираемся удалить
    // Если id совпали - значит мы нашли интересующую нас Заметку

    this.notes.splice(idx, 1); // убираем из списка Заметок элемент в кол-ве 1, начиная с найденного нами индекса. Т.е. убираем удаляемую Заметку

    // обработка случая, если мы удаляем выбранную в настоящий момент Заметку
    // ключевое слово: if - описание условия и выполняемой последовательности действий в случае удовлетворения условию
    // 1. в блоке if проверяем, выбрана ли в данный момент Заметка
    // 2. в блоке if проверяем, равна ли выбранная в данный момент Заметка удаляемой Заметке
    // 3. если оба условия правдивы (комбинируем через логический оператор && - И), мы зануляем выбранную заметку
    if (!!this.selectedNote && this.selectedNote.id === note.id) {
      this.selectedNote = null;
    }
  }
  //#endregion МЕТОДЫ КОМПОНЕНТА
}
